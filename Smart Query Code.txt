// Import MongoDB client
const { MongoClient } = require('mongodb');

// MongoDB connection URI
const uri = "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/?retryWrites=true&w=majority";

// Create a MongoDB client
const client = new MongoClient(uri);

async function monitorSoccerSystem() {
  try {
    // Connect to the MongoDB cluster
    await client.connect();

    // Access the database
    const database = client.db("soccer_vision_system");
    
    // Player Tracking Collection
    const playerTracking = database.collection("player_tracking");
    
    // Crowd Monitoring Collection
    const crowdMonitoring = database.collection("crowd_monitoring");

    // Query for live player tracking data for a specific match
    const matchId = "match123"; // Replace with the current match ID
    const livePlayers = await playerTracking.find({
      match_id: matchId,
      timestamp: { $gte: new Date(Date.now() - 10000) } // Last 10 seconds
    }).toArray();
    console.log("Live Players Tracking Data:", livePlayers);

    // Real-time crowd density monitoring
    const crowdedSections = await crowdMonitoring.find({
      density: { $gt: 80 }, // Density > 80% indicates high congestion
      timestamp: { $gte: new Date(Date.now() - 30000) } // Last 30 seconds
    }).toArray();
    console.log("Crowded Sections:", crowdedSections);

    // Raise alerts if crowd density exceeds threshold
    crowdedSections.forEach(section => {
      if (section.alerts && section.alerts.includes("overcrowding")) {
        console.log(`ALERT: Overcrowding detected in section ${section.section}`);
      }
    });

    // Example: Track a specific player in real-time
    const playerId = "player10"; // Replace with the desired player ID
    const playerData = await playerTracking.findOne({
      player_id: playerId,
      match_id: matchId
    });
    console.log("Specific Player Data:", playerData);

  } catch (error) {
    console.error("Error monitoring the system:", error);
  } finally {
    // Close the MongoDB connection
    await client.close();
  }
}

monitorSoccerSystem();
